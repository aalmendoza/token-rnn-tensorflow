static char error [ <int> ] ; static off_t epos ; int consumeNewline ( char * buf ) { if ( strncmp ( buf , <str> , <int> ) ! = <int> ) { ERROR ( <str> , buf [ <int> ] , buf [ <int> ] ) ; return <int> ; } return <int> ; } int readLong ( FILE * fp , char prefix , long * target ) { char buf [ <int> ] , * eptr ; epos = ftello ( fp ) ; if ( fgets ( buf , sizeof ( buf ) , fp ) = = NULL ) { return <int> ; } if ( buf [ <int> ] ! = prefix ) { ERROR ( <str> , buf [ <int> ] , prefix ) ; return <int> ; } * target = strtol ( buf + <int> , & eptr , <int> ) ; return consumeNewline ( eptr ) ; } int readBytes ( FILE * fp , char * target , long length ) { long real ; epos = ftello ( fp ) ; real = fread ( target , <int> , length , fp ) ; if ( real ! = length ) { ERROR ( <str> , length , real ) ; return <int> ; } return <int> ; } int readString ( FILE * fp , char * * target ) { long len ; * target = NULL ; if ( ! readLong ( fp , <str> , & len ) ) { return <int> ; } len + = <int> ; * target = ( char * ) malloc ( len ) ; if ( ! readBytes ( fp , * target , len ) ) { return <int> ; } if ( ! consumeNewline ( * target + len - <int> ) ) { return <int> ; } ( * target ) [ len - <int> ] = <str> ; return <int> ; } int readArgc ( FILE * fp , long * target ) { return readLong ( fp , <str> , target ) ; } off_t process ( FILE * fp ) { long argc ; off_t pos = <int> ; int i , multi = <int> ; char * str ; while ( <int> ) { if ( ! multi ) pos = ftello ( fp ) ; if ( ! readArgc ( fp , & argc ) ) break ; for ( i = <int> ; i < argc ; i + + ) { if ( ! readString ( fp , & str ) ) break ; if ( i = = <int> ) { if ( strcasecmp ( str , <str> ) = = <int> ) { if ( multi + + ) { ERROR ( <str> ) ; break ; } } else if ( strcasecmp ( str , <str> ) = = <int> ) { if ( - - multi ) { ERROR ( <str> ) ; break ; } } } free ( str ) ; } if ( i < argc ) { if ( str ) free ( str ) ; break ; } } if ( feof ( fp ) & & multi & & strlen ( error ) = = <int> ) { ERROR ( <str> ) ; } if ( strlen ( error ) > <int> ) { printf ( <str> , error ) ; } return pos ; } int main ( int argc , char * * argv ) { char * filename ; int fix = <int> ; if ( argc < <int> ) { printf ( <str> , argv [ <int> ] ) ; exit ( <int> ) ; } else if ( argc = = <int> ) { filename = argv [ <int> ] ; } else if ( argc = = <int> ) { if ( strcmp ( argv [ <int> ] , <str> ) ! = <int> ) { printf ( <str> , argv [ <int> ] ) ; exit ( <int> ) ; } filename = argv [ <int> ] ; fix = <int> ; } else { printf ( <str> ) ; exit ( <int> ) ; } FILE * fp = fopen ( filename , <str> ) ; if ( fp = = NULL ) { printf ( <str> , filename ) ; exit ( <int> ) ; } struct redis_stat sb ; if ( redis_fstat ( fileno ( fp ) , & sb ) = = - <int> ) { printf ( <str> , filename ) ; exit ( <int> ) ; } off_t size = sb . st_size ; if ( size = = <int> ) { printf ( <str> , filename ) ; exit ( <int> ) ; } off_t pos = process ( fp ) ; off_t diff = size - pos ; printf ( <str> , ( long long ) size , ( long long ) pos , ( long long ) diff ) ; if ( diff > <int> ) { if ( fix ) { char buf [ <int> ] ; printf ( <str> , ( long long ) size , ( long long ) diff , ( long long ) pos ) ; printf ( <str> ) ; if ( fgets ( buf , sizeof ( buf ) , stdin ) = = NULL | | strncasecmp ( buf , <str> , <int> ) ! = <int> ) { printf ( <str> ) ; exit ( <int> ) ; } if ( ftruncate ( fileno ( fp ) , pos ) = = - <int> ) { printf ( <str> ) ; exit ( <int> ) ; } else { printf ( <str> ) ; } } else { printf ( <str> ) ; exit ( <int> ) ; } } else { printf ( <str> ) ; } fclose ( fp ) ; return <int> ; } 
